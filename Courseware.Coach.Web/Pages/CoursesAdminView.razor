@page "/admin/courses"
@inject NavigationManager Nav
@inherits ReactiveInjectableComponentBase<CoursesViewModel>
@if (ViewModel != null)
{                                      
    <AlertView Alert="ViewModel.Alert" />
    <AddCourseView ViewModel="ViewModel.AddCourseViewModel"/>
    <TelerikGrid @ref="grdRef" TItem="CourseViewModel" OnRead="ViewModel.Load.BindReadCommand<Course, CourseViewModel>(this)"
       Sortable="true" FilterMode="GridFilterMode.FilterMenu" Pageable="true" PageSize="25" Resizable="true">
        <GridColumns>
            <GridColumn Field="Data.Name" Title="Name"/>
            <GridColumn Field="Coach.Name" Title="Coach" Filterable="false" Sortable="false">
               <Template>
                    <TelerikButton OnClick="() => RedirectCoach(((CourseViewModel)context).Coach!.Id)">
                       @(((CourseViewModel)context).Coach!.Name)
                   </TelerikButton>
               </Template>
            </GridColumn>
            <GridColumn Field="CoachInstance.Name" Title="Instance" Filterable="false" Sortable="false"/>
            <GridColumn Field="Data.Price" Title="Price"/>
            <GridColumn Field="Data.DaysToComplete" Title="Days to Complete"/>
            <GridColumn Field="Data.Id" Title="Open">
                <Template>
                    <TelerikButton OnClick="() => Redirect(((CourseViewModel)context).Data.Id)">...</TelerikButton>
                </Template>
            </GridColumn>
        </GridColumns>
    </TelerikGrid>
}
@code {
    protected TelerikGrid<CourseViewModel> grdRef = null!;
    protected void Reload()
    {
        grdRef.Rebind();
    }
    protected void RedirectCoach(Guid id)
    {
        Nav.NavigateTo($"/admin/coaches/{id}");
    }
    protected void Redirect(Guid id)
    {
        Nav.NavigateTo($"/admin/courses/{id}");
    }
    protected override async Task OnInitializedAsync()
    {
        if (ViewModel != null)
        {
            ViewModel.Reload = Reload;
        }
        await base.OnInitializedAsync();
    }
}
