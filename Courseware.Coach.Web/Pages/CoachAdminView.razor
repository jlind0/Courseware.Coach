@using Microsoft.CognitiveServices.Speech
@using CH = Courseware.Coach.Core.Coach
@inject NavigationManager Nav
@inherits ReactiveComponentBase<CoachViewModel>
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    @if(ViewModel.Data != null)
    {
        <TelerikForm Model="ViewModel.Data" OnValidSubmit="ViewModel.Save.BindCommand<EditContext>()">
            <FormValidation>
                <DataAnnotationsValidator />
            </FormValidation>
            <FormItems>
                <FormItem Field="@nameof(CH.Name)" LabelText="Name" />
                <FormItem Field="@nameof(CH.Description)" LabelText="Description" />
                <FormItem Field="@nameof(CH.Slug)" LabelText="Slug" />
                <FormItem Field="@nameof(CH.IsPublished)" LabelText="Is Published"/> 
                <FormItem Field="@nameof(CH.Price)" LabelText="Price" />
                <FormItem Field="@nameof(CH.TopicSystemPrompt)" EditorType="FormEditorType.TextArea" LabelText="Topic System Prompt" />
                <FormItem Field="@nameof(CH.TopicUserPrompt)" EditorType="FormEditorType.TextArea" LabelText="Topic User Prompt" />
                <FormItem Field="@nameof(CH.EnableImageGeneration)" LabelText="Enable Image Generation"/>
                <FormItem Field="@nameof(CH.AzureSearchIndexName)" LabelText="Search Index Name"/>
                <FormItem Field="@nameof(CH.IsTrialEligible)" LabelText="Is Trial Eligible"/>
                <FormItem Field="@nameof(CH.DurationOfTrialInMinutes)" LabelText="Duration of Trial in Minutes"/>
                <FormItem Field="@nameof(CH.NativeLocale)" LabelText="Native Locale">
                    <Template>
                        <TelerikDropDownList @bind-Value="ViewModel.SelectedLocale"
                                             Data="ViewModel.Locales" TItem="string" TValue="string" ValueField="ShortName">
                            <ItemTemplate>
                                @context
                            </ItemTemplate>
                            <ValueTemplate>
                                @context
                            </ValueTemplate>
                        </TelerikDropDownList>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(CH.DefaultVoiceName)" LabelText="Default Voice Name">
                    <Template>
                        <TelerikDropDownList @bind-Value="ViewModel.SelectedVoice"
                                             Data="ViewModel.Voices" TItem="VoiceInfo" TValue="string" ValueField="ShortName">
                            <ItemTemplate>
                                @context.LocalName (@context.Locale)
                            </ItemTemplate>
                            <ValueTemplate>
                                @context.LocalName (@context.Locale)
                            </ValueTemplate>
                        </TelerikDropDownList>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(CH.APIKey)" LabelText="API Key" />
            </FormItems>
        </TelerikForm>
        @if (!(ViewModel.Data.IsBotDeployed == true))
        {

                <h3>Deploy Bot</h3>
             <TelerikTextBox @bind-Value="ViewModel.Data.BotFrameworkName"/>
             <TelerikButton OnClick="ViewModel.DeployBot.BindCommand<MouseEventArgs>()">Deploy</TelerikButton>
        }
        <h4>Add Twitter Account</h4>
        <TelerikTextBox @bind-Value="ViewModel.TwitterAccount"/>
        <TelerikButton OnClick="ViewModel.AddTwitter.BindCommand<MouseEventArgs>()">Add</TelerikButton>
        <ul>
            @foreach (var account in ViewModel.Data.TwitterAccounts)
            {
                <li>@account.AccountName</li>
            }
        </ul>
        <h4>Upload Thumbnail Image</h4>
        <InputFile OnChange="ViewModel.UploadThumbnail.BindUploadBuiltInCommand(this)" accept=".jpg,.jpeg,.png,.gif,.bmp,.tiff,.svg,.webp" />
        @if (!string.IsNullOrEmpty(ViewModel.Data.ThumbnailImageId))
        {
            <img src="/api/images/@(ViewModel.Data.ThumbnailImageId)" alt="Thumbnail Image" />
        }
        <h4>Upload Banner Image</h4>
        <InputFile OnChange="ViewModel.UploadBanner.BindUploadBuiltInCommand(this)" accept=".jpg,.jpeg,.png,.gif,.bmp,.tiff,.svg,.webp" />
        @if (!string.IsNullOrEmpty(ViewModel.Data.BannerImageId))
        {
            <img src="/api/images/@(ViewModel.Data.BannerImageId)" alt="Banner Image" />
        }
        <AddCoachInstanceView ViewModel="ViewModel.AddInstanceViewModel"/>
        <TelerikGrid @ref="grdRef" Data="ViewModel.CoachInstances" Sortable="true">
            <GridColumns>
                <GridColumn Field="Data.Name" Title="Name" />
                <GridColumn Field="Data.Slug" Title="Slug" />
                <GridColumn Field="Data.NativeLocale" Title="Native Locale">
                    <Template>
                        <TelerikDropDownList @bind-Value="@(((CoachInstanceViewModel)context).SelectedLocale)"
                                             Data="@(((CoachInstanceViewModel)context).Locales)" TItem="string" TValue="string" ValueField="ShortName">
                            <ItemTemplate Context="ctx">
                                @ctx
                            </ItemTemplate>
                            <ValueTemplate Context="ctx">
                                @ctx
                            </ValueTemplate>
                        </TelerikDropDownList>
                    </Template>
                </GridColumn>
                <GridColumn Field="Data.DefaultVoiceName" Title="Default Voice Name">
                    <Template>
                        <TelerikDropDownList @bind-Value="@(((CoachInstanceViewModel)context).SelectedVoice)"
                                             Data="@(((CoachInstanceViewModel)context).Voices)" TItem="VoiceInfo" TValue="string" ValueField="ShortName">
                            <ItemTemplate Context="ctx">
                                @ctx.LocalName (@ctx.Locale)
                            </ItemTemplate>
                            <ValueTemplate Context="ctx">
                                @ctx.LocalName (@ctx.Locale)
                            </ValueTemplate>
                        </TelerikDropDownList>
                    </Template>
                </GridColumn>
                <GridColumn Title="Images">
                    <Template>
                        <InputFile OnChange="((CoachInstanceViewModel)context).UploadThumbnail.BindUploadBuiltInCommand(this)" accept=".jpg,.jpeg,.png,.gif,.bmp,.tiff,.svg,.webp" />
                        @if (!string.IsNullOrEmpty(((CoachInstanceViewModel)context).Data.ThumbnailImageId))
                        {
                            <img src="/api/images/@(((CoachInstanceViewModel)context).Data.ThumbnailImageId)" alt="Thumbnail Image" />
                        }
                        <InputFile OnChange="((CoachInstanceViewModel)context).UploadBanner.BindUploadBuiltInCommand(this)" accept=".jpg,.jpeg,.png,.gif,.bmp,.tiff,.svg,.webp" />
                        @if (!string.IsNullOrEmpty(((CoachInstanceViewModel)context).Data.BannerImageId))
                        {
                            <img src="/api/images/@(((CoachInstanceViewModel)context).Data.BannerImageId)" alt="Banner Image" />
                        }
                    
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(CoachInstance.Id)" Title="Commands">
                    <Template>
                        <TelerikButton OnClick="(((CoachInstanceViewModel)context)).Parent.RemoveInstance.BindCommand<MouseEventArgs>(((CoachInstanceViewModel)context).Data.Id)">
                            <i class="fa-solid fa-xmark"></i>
                        </TelerikButton>
                    </Template>
                </GridColumn>
                
            </GridColumns>
        </TelerikGrid>
    }
   
}

@code {
    protected TelerikGrid<CoachInstanceViewModel> grdRef = null!;
    protected void Reload()
    {
        grdRef?.Rebind();
    }
    protected override async Task OnInitializedAsync()
    {
        if (ViewModel != null)
        {
            ViewModel.Reload = Reload;
        }
        await base.OnInitializedAsync();
    }
}
