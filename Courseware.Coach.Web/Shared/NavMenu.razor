@inject AuthenticationStateProvider AuthState
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Courseware Coach</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if(isAdmin)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/admin/clones">
                    <span aria-hidden="true"><i class="fa-solid fa-clone"></i></span>&nbsp;Clones
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/admin/coaches">
                    <span aria-hidden="true"><i class="fa-solid fa-person-chalkboard"></i></span>&nbsp;Coaches
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/admin/users">
                    <span aria-hidden="true"><i class="fa-solid fa-users"></i></span>&nbsp;Users
                </NavLink>
            </div>
        }
        @if(isLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/profile">
                    <span aria-hidden="true"><i class="fa-solid fa-user"></i></span>&nbsp;Profile
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isAdmin = false;
    private bool isLoggedIn = false;
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        isLoggedIn = authState.User?.Identity?.IsAuthenticated ?? false;
        isAdmin = authState.User?.IsInRole("Admin") ?? false;
        await base.OnInitializedAsync();
    }
}
